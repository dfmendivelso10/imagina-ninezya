---
import datos from '@/datosVisibles/indicadores';
import Plantilla from '@/plantillas/Principal.astro';
import MenuAnios from '@/componentes/MenuAnios.astro';
import SelectorNivel from '@/componentes/SelectorNivel.astro';
import Mapa from '@/componentes/Mapa.astro';
import LineaTiempo from '@/componentes/LineaTiempo.astro';
import type { GetStaticPaths } from 'astro';
import FichaTecnica from '@/componentes/FichaTecnica.astro';
import Buscador from '@/componentes/Buscador.astro';
import DescripcionYa from '@/componentes/DescripcionYa.astro';
import PropuestaIndicador from '@/componentes/PropuestaIndicador.astro';

export const getStaticPaths = (() => {
  return datos
    .map((ya) => {
      return ya.indicadores.map((indicador) => {
        return { params: { ya: ya.ruta, indicador: indicador.ruta } };
      });
    })
    .flat();
}) satisfies GetStaticPaths;

const { ya, indicador } = Astro.params;
const posYa = datos.findIndex((instancia) => instancia.ruta === ya);
const datosYa = datos[posYa];
const datosIndicador = datosYa.indicadores.find((instancia) => instancia.ruta === indicador);
const archivosYa: { titulo: string; archivo: string; umbral?: number; ruta: string }[] = datosYa.indicadores.map(
  (indicador) => {
    return {
      titulo: indicador.nombre,
      archivo: indicador.archivo,
      umbral: indicador.umbral,
      ruta: `${import.meta.env.BASE_URL}/${datosYa.ruta}/${indicador.ruta}`,
    };
  }
);
---

<Plantilla titulo={datosIndicador.nombre} conMenu={true}>
  <DescripcionYa
    titulo={`${posYa + 1}. ${datosYa.nombre}`}
    definicion={datosYa.definicion}
    img={datosYa.imagen}
    archivos={archivosYa}
    hayDatos={datosIndicador.hay_datos}
  />
  {
    datosIndicador.hay_datos && (
      <div
        id="visualizaciones"
        class="columna"
        data-archivo={datosIndicador.archivo}
        data-umbral={datosIndicador.umbral}
        data-unidad={datosIndicador.unidad}
      >
        <div id="secionSuperior">
          <div id="filtros">
            <div id="indicadorSeleccionado">
              <h2 id="nombreYa">{datosYa.nombre}</h2>
              <h3 id="nombreIndicador">{datosIndicador.nombre}</h3>

              <span id="abrirFicha">?</span>
              <p id="descripcionIndicador">{datosIndicador.explicacion}</p>
            </div>
            <Buscador />
            <FichaTecnica />
            <SelectorNivel />
            <MenuAnios />
          </div>
          <div id="mapa"><Mapa ancho={30} alto={45} /></div>
        </div>

        <LineaTiempo alto={25} />
      </div>

      <div id="comparativo" class="columna"></div>
      <div id="informacion"></div>
    </div>
    )
  }

  {!datosIndicador.hay_datos && <PropuestaIndicador />}
</Plantilla>

<script>
  import MapaDetalle from '@/componentes/MapaDetalle';
  import { añoSeleccionado, lugaresSeleccionados, cargarIndicador } from '@/utilidades/cerebro';
  const comparativo = document.getElementById('comparativo') as HTMLDivElement;
  const botonFicha = document.getElementById('abrirFicha') as HTMLSpanElement;
  const infoAdicional = document.getElementById('contenedorInfoAdicional') as HTMLDivElement;

  botonFicha.addEventListener('click', () => {
    infoAdicional.classList.toggle('abierta');
  });

  async function inicio() {
    await cargarIndicador();
  }

  inicio().catch(console.error);

  añoSeleccionado.subscribe(async () => {
    const existentes = comparativo.querySelectorAll<MapaDetalle>('enflujo-mapita');

    if (existentes && existentes.length) {
      existentes.forEach((mapita) => {
        mapita.pintarMapa();
      });
    }
  });

  window.addEventListener('resize', () => {
    const existentes = comparativo.querySelectorAll<MapaDetalle>('enflujo-mapita');

    if (existentes && existentes.length) {
      existentes.forEach((mapita) => {
        mapita.escalar();
      });
    }
  });

  lugaresSeleccionados.subscribe(async (lista) => {
    const existentes = comparativo.querySelectorAll<MapaDetalle>('enflujo-mapita');

    if (lista.length) {
      for (const mapa of lista) {
        const { nombre, codigo, color } = mapa;
        let existeLugarEnDOM = false;

        existentes.forEach((mapita) => {
          if (mapita.id === `${codigo}`) {
            existeLugarEnDOM = true;
          }

          // Borrar si no está en la lista
          if (!lista.find((lugar) => lugar.codigo === mapita.id)) {
            if (comparativo.contains(mapita)) {
              comparativo.removeChild(mapita);
            }
          }
        });

        if (!existeLugarEnDOM) {
          const mapita = document.createElement('enflujo-mapita') as MapaDetalle;
          mapita.className = 'mapita';
          mapita.id = `${codigo}`;
          mapita.dataset.departamento = nombre;
          
          mapita.agregarTitulo(nombre);
          
          await mapita.crearMapa();
          mapita.definirColor(color);
          mapita.escalar();
          mapita.pintarMapa();
          comparativo.appendChild(mapita);
        }
      }
    } else {
      comparativo.innerHTML = '';
    }
  });
</script>

<style lang="scss">
  #secionSuperior {
    display: flex;
  }

  #descripcionIndicador {
    border: 1px solid var(--moradoProfundo);
    padding: 1em;
    color: var(--negroCasi);
    font-size: 0.85em;
    margin-top: 0;
    font-variation-settings:
      'MONO' 0,
      'CASL' 0,
      'wght' 433,
      'slnt' 0,
      'CRSV' 0;
  }

  #indicadorSeleccionado {
    color: var(--moradoProfundo);
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    font-size: 1em;
    min-width: 250px;
    width: 15vw;

    #nombreYa {
      flex-basis: 100%;
      background-color: var(--moradoProfundo);
      color: white;
      padding: 0.3em;
      margin: 0;
      border: 1px solid var(--moradoProfundo);
    }

    #nombreIndicador {
      flex-basis: 100%;
      padding: 0.3em;
      margin: 0;
      border: 1px solid var(--moradoProfundo);
      color: var(--negroCasi);
    }

    #abrirFicha {
      display: block;
      position: relative;
      left: 96%;
      bottom: 10px;
      background-color: var(--blancoMarfil);
      border-radius: 50%;
      padding: 0.18em 0.2em;
      width: 1.4em;
      height: 1.4em;
      text-align: center;
      font-size: 0.8em;
      border: solid 1px var(--azulViejo);
      color: var(--azulViejo);
      cursor: pointer;
    }
  }
</style>
