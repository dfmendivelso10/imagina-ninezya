---
export interface Props {
  // Porcentaje que no debe superar a lo ancho (1-100)
  ancho?: number;
  // Porcentaje que no debe superar a lo alto (1-100)
  alto?: number;
}

const { ancho, alto } = Astro.props;
---

<div id="contenedorMapa">
  <div>
    <svg class="mapa" data-proporciones={JSON.stringify({ ancho, alto })}>
      <defs>
        <pattern id="sinInfo" patternUnits="userSpaceOnUse" width="3.5" height="3.5" patternTransform="rotate(45)">
          <line x1="0" y="0" x2="0" y2="3.5" stroke="#46484A" stroke-width="1"></line>
        </pattern>
      </defs>

      <g id="colombia"></g>
    </svg>
  </div>
</div>

<script>
  import { crearLinea, escalaColores, escalaCoordenadas, extremosLugar } from '@enflujo/alquimia';
  import type { ExtremosCoordenadas } from '@/tipos';
  import type { FeatureCollection } from 'geojson';
  import {
    datosColombia,
    datosIndicador,
    datosIndicadorNal,
    nivel,
    deptoSeleccionado,
    añoSeleccionado,
    lugaresSeleccionados,
  } from '@/utilidades/cerebro';
  import type { IMapearCoordenadas } from '@enflujo/alquimia/libreria/modulos/tipos';

  const mapa = document.querySelector('.mapa') as HTMLDivElement;
  const colombia = document.getElementById('colombia');
  const informacion = document.getElementById('informacion');

  let mapearCoordenadas: IMapearCoordenadas;
  let extremosGeo: ExtremosCoordenadas;
  const proporciones = JSON.parse(mapa.dataset.proporciones);
  const definirColor = (ascendente: boolean) => {
    if (ascendente) {
      return escalaColores(0, 100, '#DE2E56', '#94FF1A');
    } else {
      return escalaColores(0, 100, '#94FF1A', '#DE2E56');
    }
  };

  const zonas = {};
  let ancho = 0;
  let alto = 0;
  let coordenadasAncho = 0;
  let coordenadasAlto = 0;
  let color: (valor: number) => string;
  let municipiosAgregados = {}; // Objeto para guardar las listas de municipios seleccionados de cada departamento en el nivel 'mun'
  let datosParaPintar: FeatureCollection; // Esto puede ser departamentos o municipios

  mapa.onmouseenter = () => {
    informacion.classList.add('visible');
  };

  mapa.onmouseleave = () => {
    informacion.classList.remove('visible');
  };

  function extremos() {
    mapearCoordenadas = escalaCoordenadas(
      extremosGeo.latitudMin,
      extremosGeo.latitudMax,
      extremosGeo.longitudMin,
      extremosGeo.longitudMax
    );

    coordenadasAncho = extremosGeo.longitudMax - extremosGeo.longitudMin;
    coordenadasAlto = extremosGeo.latitudMax - extremosGeo.latitudMin;
  }

  function calcularPorcentaje(valor: number, porcentaje: number) {
    return valor * (porcentaje / 100);
  }

  /* Función para definir las proporciones iniciales del mapa. 
  La saqué de escalar() para que no se hiciera más pequeño cada vez que se dibuja el mapa.*/
  function definirPoporciones() {
    if (proporciones.ancho && proporciones.ancho <= 100) {
      ancho = calcularPorcentaje(window.innerWidth, proporciones.ancho);
    }

    if (proporciones.alto && proporciones.alto <= 100) {
      alto = calcularPorcentaje(window.innerHeight, proporciones.alto);
    }
  }

  function escalar() {
    definirPoporciones();

    // Revisa las proporciones del mapa para que no se deforme
    if (coordenadasAncho > coordenadasAlto) {
      alto = (ancho * (coordenadasAlto / coordenadasAncho)) | 0;
    } else {
      ancho = (alto * (coordenadasAncho / coordenadasAlto)) | 0;
    }

    mapa.setAttribute('width', `${ancho}`);
    mapa.setAttribute('height', `${alto}`);

    if (!datosParaPintar) return;

    datosParaPintar.features.forEach((lugar) => {
      if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
        const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho, alto);
        const zona = zonas[lugar.properties.codigo];
        zona.svg.setAttribute('d', linea);
      }
    });
  }

  datosIndicador.subscribe(async () => {
    const nuevoNivel = nivel.get();

    if (nuevoNivel === 'mun') {
      const municipios = datosColombia.value['mun'];
      if (!municipios) return;
      extremosGeo = extremosLugar(municipios);

      extremos();
      escalar();

      colombia.innerHTML = '';
      datosParaPintar = municipios;

      crearMapa('municipios');
      if (!añoSeleccionado.value) return;
      pintarMapa(añoSeleccionado.value);
    } else if (nuevoNivel === 'dep') {
      const departamentos = datosColombia.value['dep'];

      if (!departamentos) return;
      extremosGeo = extremosLugar(departamentos);
      extremos();
      escalar();

      colombia.innerHTML = '';
      datosParaPintar = departamentos;
      crearMapa('departamentos');
      if (!añoSeleccionado.value) return;
      pintarMapa(añoSeleccionado.value);
    }
  });

  añoSeleccionado.subscribe(() => {
    pintarMapa(añoSeleccionado.value);
  });

  // Definir la dirección de la escala de color cuando cambien los datos nacionales
  datosIndicadorNal.subscribe(({ ascendente }) => {
    color = definirColor(ascendente);
  });

  function pintarMapa(año: string) {
    const datos = datosIndicador.get()[año];
    if (!datos) return;

    // Reiniciar todos sin datos antes de pintar de nuevo
    for (const codigo in zonas) {
      zonas[codigo].svg.setAttribute('style', 'fill: url(#sinInfo)');
    }

    datos.forEach(([codigo, valor]) => {
      const zona = zonas[codigo];
      if (zona) {
        if (valor) {
          zona.svg.setAttribute('style', `fill: ${color(valor)}`);
          zona.valor = +valor;
        } else {
          zona.svg.setAttribute('style', 'fill: url(#sinInfo)');
          zona.valor = null;
        }
      } else {
        console.log('No existe lugar con codigo', codigo);
      }
    });
  }

  function crearMapa(clase: string) {
    datosParaPintar.features.forEach((lugar) => {
      if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
        const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho, alto);
        const zona = document.createElementNS('http://www.w3.org/2000/svg', 'path');

        zona.setAttribute('class', `${clase}`);
        zona.setAttribute('d', linea);
        zona.setAttribute('id', lugar.properties.codigo);
        zona.setAttribute('style', 'fill: url(#sinInfo)');
        zona.setAttribute('shape-rendering', 'geometricPrecision');

        zona.onmouseenter = (evento) => {
          const x = evento.clientX;
          const y = evento.clientY - 30;
          const valor = zonas[lugar.properties.codigo].valor;

          if (nivel.get() === 'mun') {
            informacion.innerText = `${lugar.properties.nombre} (${lugar.properties.dep}): ${
              valor ? valor + '%' : 'Sin datos'
            }`;
          } else {
            informacion.innerText = `${lugar.properties.nombre}: ${valor ? valor + '%' : 'Sin datos'}`;
            zona.classList.add('departamento');
          }

          // Asignar nombre del departamento a la lista de lugares seleccionados
          zona.onclick = () => {
            let nombre = '';
            let codigo = '';
            let codigoMun = '';

            if (nivel.get() === 'mun') {
              deptoSeleccionado.set(lugar.properties.dep);
              nombre = lugar.properties.dep;
              codigo = lugar.properties.codigo.substring(0, 2);
              codigoMun = lugar.properties.codigo;

              // Si no existe la lista de municipios del departamento al que pertenece el municipio, la crea
              if (!municipiosAgregados[codigo]) {
                municipiosAgregados[codigo] = [];
              }

              // Busca la posición del municipio en la lista del departamento
              const posicionMun = municipiosAgregados[codigo].findIndex(
                ({ codigo: codigoAgregado }) => codigoAgregado === codigoMun
              );

              // Agrega o quita el municipio a/de la lista del departamento
              if (!municipiosAgregados[codigo].includes(lugar.properties.codigo)) {
                municipiosAgregados[codigo].push(lugar.properties.codigo);
              } else {
                municipiosAgregados[codigo].splice(posicionMun, 1);
              }
            } else {
              nombre = lugar.properties.nombre;
              codigo = lugar.properties.codigo;
              deptoSeleccionado.set(nombre);
            }

            zona.classList.toggle('seleccionada');
            const lugares = [...lugaresSeleccionados.get()]; // es necesario clonar el array acá para que al final de las operaciones que siguen a continuación, el store se encargue de hacer llamado a todos los que estén usando `listen()`.
            const posicionLugar = lugares.findIndex(({ nombre: nombreAgregado }) => nombreAgregado === nombre);

            if (posicionLugar < 0 && !lugares.includes({ nombre, codigo })) {
              lugares.push({ nombre, codigo });
            } else {
              if (nivel.get() === 'mun') {
                // Si la lista de municipios del departamento se vacía, borra el mapa del departamento
                if (municipiosAgregados[codigo].length === 0) {
                  lugares.splice(posicionLugar, 1);
                }
              } else {
                lugares.splice(posicionLugar, 1);
              }
            }

            lugaresSeleccionados.set(lugares); // Cambiar valores en el store, todos los que esten con listen() van a recibir estos nuevos valores.
          };

          Object.assign(informacion.style, {
            top: `${y}px`,
            left: `${x}px`,
          });
        };

        zona.onmouseleave = () => {};

        zonas[lugar.properties.codigo] = { svg: zona, valor: null };
        colombia.appendChild(zona);
      }
    });
  }

  definirPoporciones();
  window.addEventListener('resize', escalar);
</script>

<style lang="scss" is:global>
  #contenedorMapa {
    margin-top: 1em;
    stroke: var(--moradoProfundo);
    stroke-opacity: 0.5;

    .departamento {
      cursor: pointer;
    }

    .seleccionada {
      stroke: var(--escarlataBebe);
      stroke-opacity: 1;
      stroke-width: 2px;
    }
  }
</style>
