---
interface Props {
  titulo: string;
  definicion: string;
  img: string;
  archivos: { titulo: string; archivo: string; umbral?: number; ruta: string }[];
  hayDatos: boolean;
}
const { img, titulo, definicion, archivos, hayDatos } = Astro.props;
---

<div id="descripcionYa">
  <div class="cerrarDescripcion">X</div>
  <div id="iconoYa" style={`background-image:url(${import.meta.env.BASE_URL}/iconos/${img}.svg)`}></div>

  <section class="definicion">
    <h2>{titulo}</h2>
    <p>{definicion}</p>
  </section>

  <div id="contenedorLineasIndicadores">
    {
      archivos.map((obj) => {
        return (
          <a
            href={obj.ruta}
            class={`descContenedorIndicador${Astro.url.pathname === obj.ruta ? ' activo' : ''}`}
            style="width: 45%"
            data-archivo={obj.archivo}
            data-umbral={obj.umbral}
          >
            <h3>{obj.titulo}</h3>
            {hayDatos && <svg class="visDescripcion" style="width:100%; height:100px" />}
          </a>
        );
      })
    }
  </div>
</div>

<script>
  import type { DatosIndicadorNal, DatosPorAñoOrdenado } from '@/tipos';
  import { pedirDatos } from '@/utilidades/ayudas';
  import { lugaresSeleccionados } from '@/utilidades/cerebro';
  import { colorPositivo } from '@/utilidades/constantes';
  import { convertirEscala } from '@enflujo/alquimia';

  const contenedor = document.getElementById('descripcionYa') as HTMLDivElement;
  const cerrar = document.querySelector<HTMLDivElement>('.cerrarDescripcion') as HTMLDivElement;
  const icono = document.getElementById('iconoYa') as HTMLDivElement;
  const contenedores = document.querySelectorAll<HTMLDivElement>('.descContenedorIndicador');
  let cerradoAlMenosUna = false;

  if (contenedores) {
    for await (const elemento of contenedores) {
      const nombreArchivo = elemento.dataset.archivo;
      const umbral = elemento.dataset.umbral;

      try {
        await crearLinea(elemento, nombreArchivo, umbral);
      } catch (error) {
        //
      }
    }
  }

  cerrar.onclick = () => {
    contenedor.classList.add('cerrado');
  };

  icono.onclick = () => {
    if (contenedor.classList.contains('cerrado')) {
      contenedor.classList.remove('cerrado');
    }
  };

  async function crearLinea(elemento: HTMLDivElement, nombreArchivo: string, umbral?: string) {
    const svg = elemento.querySelector('svg');
    if (!svg) return;

    const respuesta = await pedirDatos<DatosIndicadorNal>(
      `https://enflujo.com/bodega/ninezya/${nombreArchivo}-nal.json`
    );

    if (respuesta) {
      const ordenados: DatosPorAñoOrdenado = [];
      const años = Object.keys(respuesta.datos);
      const primerAño = +años[0];
      const ultimoAño = +años[años.length - 1];

      for (const año in respuesta.datos) {
        ordenados.push({ año, valor: respuesta.datos[año] });
      }

      const posX = (valor: number) => {
        const dims = svg.getBoundingClientRect();
        return convertirEscala(valor, primerAño, ultimoAño, 0, dims.width);
      };
      const posY = (valor: number) => {
        const dims = svg.getBoundingClientRect();
        return convertirEscala(valor, 0, respuesta.max, dims.height, 0);
      };

      let datosLinea = '';
      const linea = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      linea.setAttribute('class', 'lineaDesc');

      if (umbral) {
        const area = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        area.setAttribute('class', 'umbralDesc');
        area.setAttribute('fill', colorPositivo);
        area.setAttribute('x', '0');
        if (respuesta.ascendente) {
          area.setAttribute('y', '0');
          area.setAttribute('height', `${posY(+umbral)}`);
        } else {
          const y = posY(+umbral);
          area.setAttribute('y', `${y}`);
          area.setAttribute('height', `${posY(0) - y}`);
        }

        area.setAttribute('width', '100%');
        svg.appendChild(area);
      }
      svg.appendChild(linea);

      ordenados.forEach(({ año, valor }, i) => {
        const punto = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        const anteriorConDatos = i > 0 ? ordenados[i - 1].valor : false;
        const x = posX(+año) | 0;
        const y = posY(valor) | 0;

        punto.setAttribute('class', 'puntoDesc');
        punto.setAttribute('style', `transform:translate(${x}px, ${y}px)`);
        punto.setAttribute('r', '3');
        punto.setAttribute('cx', '0');
        punto.setAttribute('cy', '0');
        svg.appendChild(punto);
        if (i === 0 || !valor || !anteriorConDatos) {
          datosLinea += `M${x} ${y ? y : '0'}`;
        } else {
          datosLinea += ` L${x} ${y}`;
        }
      });

      linea.setAttribute('d', datosLinea);
    }
  }

  lugaresSeleccionados.subscribe((lugares) => {
    if (lugares.length) {
      cerradoAlMenosUna = true;
      contenedor.classList.add('cerrado');
    } else if (cerradoAlMenosUna) {
      contenedor.classList.remove('cerrado');
    }
  });
</script>

<style lang="scss" is:global>
  @import '@/scss/constantes';

  .lineaDesc {
    stroke-width: 2px;
    stroke: var(--blancoMarfil);
    fill: none;
  }

  .puntoDesc {
    fill: var(--moradoPandito);
  }

  .visDescripcion {
    border: 1px solid;
  }

  .umbralDesc {
    opacity: 0.6;
  }
</style>

<style lang="scss">
  @import '@/scss/constantes';

  #descripcionYa {
    position: fixed;
    top: $altoMenuSuperior;
    width: 90%;
    height: calc(100% - $altoMenuSuperior);
    background-color: var(--moradoProfundo);
    color: var(--blancoMarfil);
    z-index: 8;
    right: 0;
    transition: all 0.25s ease-in-out;
    overflow: auto;
    opacity: 0.95;

    &.cerrado {
      right: -90%;

      #iconoYa {
        position: fixed;
        right: 0;
        background-color: var(--moradoProfundo);
        width: 70px;
        height: 70px;
        cursor: pointer;
      }
    }
  }

  #iconoYa {
    background-repeat: no-repeat;
    width: 200px;
    height: 200px;
    background-size: 200%;
    background-position: 100%;
    margin: 1em auto 0 auto;
  }

  h2 {
    text-align: center;
    width: 100%;
    font-size: 3em;
    margin-top: 0;
  }

  h3 {
    // text-align: center;
    font-size: 1.3em;
    font-variation-settings:
      'MONO' 1,
      'CASL' 0,
      'wght' 433,
      'slnt' 0,
      'CRSV' 0;
  }

  .definicion {
    width: 80%;
    margin: 0 auto;
    margin-bottom: 2em;

    p {
      font-size: 1.6em;
      font-variation-settings:
        'MONO' 0,
        'CASL' 0,
        'wght' 233,
        'slnt' 0,
        'CRSV' 0;
    }
  }

  .cerrarDescripcion {
    cursor: pointer;
    display: inline-block;
    transition: transform 0.2s ease-out;
    padding: 0.5em;
    font-size: 2.5em;
    position: absolute;
    right: 15px;

    &:hover {
      transform: rotate(180deg);
    }
  }

  #contenedorLineasIndicadores {
    display: flex;
    flex-wrap: wrap;
    margin-left: 4em;
  }

  .descContenedorIndicador {
    padding: 1em;
    color: var(--blancoMarfil);
    text-decoration: none;

    &.activo {
      background-color: rgba(243, 234, 234, 0.3);
    }

    &:hover {
      opacity: 0.65;
    }
  }

  /// ✂️ Cortes pantalla ///

  @media screen and (min-width: $corte1) {
    #descripcionYa {
      &.cerrado {
        #iconoYa {
          width: 60px;
          height: 60px;
        }
      }
    }
    h2 {
      font-size: 2.5em;
    }
    h3 {
      font-size: 1.2em;
    }
    .definicion {
      p {
        font-size: 1.55em;
      }
    }
    .cerrarDescripcion {
      font-size: 2.5em;
    }

    #contenedorLineasIndicadores {
      margin-left: 4.5em;
    }
  }

  @media screen and (min-width: $corte2) {
    #descripcionYa {
      width: 80%;
      &.cerrado {
        #iconoYa {
          width: 40px;
          height: 40px;
        }
      }
    }
    #iconoYa {
      background-repeat: no-repeat;
      width: 150px;
      height: 150px;
      background-size: 200%;
      background-position: 100%;
      margin: 1em auto 0 auto;
    }
    h2 {
      font-size: 2em;
    }
    h3 {
      font-size: 1em;
    }
    .definicion {
      p {
        font-size: 0.9em;
      }
    }
    .cerrarDescripcion {
      font-size: 1.8em;
    }
    #contenedorLineasIndicadores {
      margin-left: 6vw;
    }
  }
  @media screen and (min-width: $corte3) {
    #descripcionYa {
      width: 60%;
      &.cerrado {
        #iconoYa {
          width: 45px;
          height: 45px;
        }
      }
    }
    h2 {
      font-size: 1.8em;
    }

    .definicion {
      p {
        font-size: 1em;
      }
    }

    #contenedorLineasIndicadores {
      margin-left: 5vw;
    }
  }
  @media screen and (min-width: $corte4) {
    .cerrarDescripcion {
      font-size: 1.5em;
    }
  }
</style>
