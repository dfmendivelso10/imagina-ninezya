---
import { dimsLineaTiempo as dims } from '@/utilidades/constantes';
interface Props {
  ancho?: number;
  alto?: number;
  meta: string;
  umbral: number;
}

const { alto, meta, umbral } = Astro.props;
---

<section id="lineaDeTiempo">
  <header id="cabezote">
    <ul class="leyendas">
      <li id="leyendaColombia" class="colombia">Colombia</li>

      {!!umbral && <li class="meta">Meta deseada: {umbral}</li>}
    </ul>

    <p class="anotacionUmbral" set:html={meta} />
  </header>

  <svg id="grafica" width="100%" height="100%" style={`height:${alto}vh`}>
    <defs>
      <linearGradient id="arriba" x1="50%" y1="0%" x2="50%" y2="100%">
        <stop offset="0%" style="stop-color: rgb(39, 247, 186); stop-opacity: 1"></stop>
        <stop offset="100%" style="stop-color: rgb(39, 247, 186); stop-opacity: 1"></stop>
      </linearGradient>

      <linearGradient id="abajo" x1="50%" y1="0%" x2="50%" y2="100%">
        <stop offset="0%" style="stop-color: rgb(39, 247, 186); stop-opacity: 1"></stop>
        <stop offset="100%" style="stop-color: rgb(39, 247, 146); stop-opacity: 1"></stop>
      </linearGradient>
    </defs>

    <rect id="marcaAñoActual"></rect>

    <g id="ejeY">
      <line
        id="bordeEjeY"
        class="lineaMarco"
        x1={dims.marcoIz}
        y1={dims.margenArriba - 1}
        x2={dims.marcoIz}
        y2="0"
        shape-rendering="crispEdges"></line>
    </g>

    <g id="ejeX"></g>
    <g id="lineasTiempo"></g>

    <text id="nombreEjeX" class="nombreEje" x="0" y="100%">Año</text>
    <text id="nombreEjeY" class="nombreEje" x="0" y="7px"></text>
  </svg>
</section>

<script>
  import { definirMedidasMax, obtenerVariableCSS, porcentajeAPixeles } from '@/utilidades/ayudas';
  import {
    listaAños,
    datosNal,
    lugaresSeleccionados,
    datosIndicadorDep,
    umbral,
    añoSeleccionado,
    listaCategorias,
    coloresCategorias,
  } from '@/utilidades/cerebro';
  import { colorPositivo, dimsLineaTiempo as dimsVis } from '@/utilidades/constantes';
  import { convertirEscala } from '@enflujo/alquimia';
  import Linea from '@/componentes/Linea';
  import type { DatosIndicador, DatosPorAñoOrdenado } from '@/tipos';

  const contenedorLinea = document.getElementById('lineaDeTiempo');
  let ejeYCreado = false;

  if (contenedorLinea) {
    const svg = document.querySelector<SVGElement>('#grafica');
    const contenedorLineas = svg.querySelector<SVGGElement>('#lineasTiempo');
    const contenedorEjeX = document.querySelector<SVGGElement>('#ejeX');
    const contenedorEjeY = document.querySelector<SVGGElement>('#ejeY');
    const bordeEjeY = document.querySelector<SVGLineElement>('#bordeEjeY');
    const nombreEjeY = svg.querySelector<SVGTextElement>('#nombreEjeY');
    const marcaAñoActual = svg.querySelector<SVGRectElement>('#marcaAñoActual');
    const lineas: Linea[] = [];
    const visualizaciones = document.getElementById('visualizaciones');
    const informacion = document.getElementById('informacion') as HTMLDivElement;
    const proporciones = { porcentaje: { x1: 2, x2: 95 }, pixeles: { x1: 0, x2: 0 } };
    const años = { primero: 0, ultimo: 0 };
    const limites = { yMax: 0, yMin: 0, color: 0 };

    let cantidadDivisiones = 5;

    const posicionX = (valor: number) =>
      convertirEscala(
        valor,
        años.primero,
        años.ultimo,
        dimsVis.marcoIz + proporciones.pixeles.x1,
        proporciones.pixeles.x2
      );

    const posicionY = (valor: number) => convertirEscala(valor, limites.yMax, 0, dimsVis.margenArriba, dimsVis.altoVis);
    let estructura: string;

    window.addEventListener('resize', escalar);

    datosNal.subscribe((datosNacionales) => {
      if (!datosNacionales.estructura) return;

      estructura = datosNacionales.estructura;
      if (estructura === 'porcentaje') {
        cantidadDivisiones = 5;
      }

      nombreEjeY.innerHTML = `${visualizaciones.dataset.unidad}`;
    });

    listaAños.subscribe((lista) => {
      if (!lista.length) return;
      const { año: primerAño } = lista[0];
      const { año: ultimoAño } = lista[lista.length - 1];
      años.primero = +primerAño;
      años.ultimo = +ultimoAño;

      crearEjeX();

      lineas.forEach((linea) => linea.actualizar(posicionX, posicionY));
    });

    function actualizarMarcaY(grupo: SVGElement, y: number, i: number) {
      const textoEje = (limites.yMax / cantidadDivisiones) * i;
      const texto = grupo.querySelector<SVGTextElement>('.textoEje');
      grupo.setAttribute('style', `transform: translate(${dimsVis.marcoIz - 5}px, ${y}px)`);
      const formatoValor = (valor: number) => Intl.NumberFormat('en', { notation: 'compact' }).format(valor);

      /**
       * Los valores del eje y ya están definidos y no cambia el valor, entonces se dejan como están,
       * de lo contrario se anima de 0 al valor
       */

      if (texto.innerHTML.length && texto.innerHTML === `${formatoValor(textoEje)}`) {
        return;
      }

      texto.innerHTML = `${formatoValor(0)}`;
      let valorActual = 0;
      const paso = Math.ceil(textoEje / 20);

      let reloj = setInterval(() => {
        if (valorActual < textoEje) {
          const nuevoValor = valorActual + paso;
          valorActual = nuevoValor < textoEje ? nuevoValor : textoEje;
          texto.innerHTML = `${formatoValor(valorActual)}`;
        } else {
          clearInterval(reloj);
        }
      }, 20);
    }

    function actualizarMarcaX(grupo: SVGElement, x: number) {
      grupo.setAttribute('style', `transform: translate(${x}px, 0px`);
    }

    function escalar() {
      if (!datosNal.value.maxNal) return;
      const marcasY = contenedorEjeY.querySelectorAll<SVGGElement>('.marcaEjeY');
      const marcasX = contenedorEjeX.querySelectorAll<SVGGElement>('.marcaEjeX');
      const areaUmbral = contenedorEjeY.querySelector<SVGGElement>('.umbral');
      const dimsSvg = svg.getBoundingClientRect();
      const { x1, x2 } = proporciones.porcentaje;
      const esNacional = !lugaresSeleccionados.value.length;
      let valMax = datosNal.value.maxNal;

      if (!esNacional) {
        let maxEnLineas = 0;

        lineas.forEach((linea) => {
          linea.datos.forEach((obj) => {
            if (maxEnLineas < obj.valor) {
              maxEnLineas = obj.valor;
            }
          });
        });

        valMax = maxEnLineas;
      }

      const { yMax, yMin, color } = definirMedidasMax(valMax, datosNal.value, umbral);

      limites.yMax = yMax;
      limites.yMin = yMin;
      limites.color = color;
      proporciones.pixeles.x1 = porcentajeAPixeles(x1, dimsSvg.width);
      proporciones.pixeles.x2 = porcentajeAPixeles(x2, dimsSvg.width);

      dimsVis.altoVis = (dimsSvg.height - dimsVis.marcoAbajo) | 0;
      bordeEjeY.setAttribute('y2', `${dimsVis.altoVis}`);
      contenedorEjeX.setAttribute('style', `transform: translateY(${dimsVis.altoVis}px)`);

      marcaAñoActual.setAttribute('y', `${dimsVis.margenArriba}`);
      marcaAñoActual.setAttribute('width', '10');
      marcaAñoActual.setAttribute('height', `${dimsVis.altoVis - dimsVis.marcoAbajo + 7}`);

      if (añoSeleccionado.value) {
        marcaAñoActual.setAttribute('x', `${posicionX(+añoSeleccionado.value) - 5}`);
      }

      if (marcasY) {
        marcasY.forEach((marca, i) => {
          actualizarMarcaY(marca, posicionY((yMax / cantidadDivisiones) * i), i);
        });
      }

      if (marcasX) {
        const años = listaAños.value;

        marcasX.forEach((marca, i) => {
          actualizarMarcaX(marca, posicionX(+años[i].año) | 0);
        });
      }

      if (areaUmbral) {
        const alto = datosNal.value.ascendente
          ? posicionY(umbral) - dimsVis.marcoAbajo + 5
          : posicionY(0) - posicionY(umbral);
        const y = datosNal.value.ascendente ? posicionY(yMax) : posicionY(umbral);

        areaUmbral.setAttribute('height', `${alto}px`);
        areaUmbral.setAttribute('y', `${y}px`);
      }

      lineas.forEach((linea) => {
        linea.actualizar(posicionX, posicionY);
      });

      if (!ejeYCreado) crearEjeY();
    }

    function crearEjeY() {
      if (umbral) {
        const areaUmbral = document.createElementNS('http://www.w3.org/2000/svg', 'rect');

        const techo = Math.min(umbral, limites.yMax);
        const alto = datosNal.value.ascendente
          ? posicionY(umbral) - dimsVis.marcoAbajo + 5
          : posicionY(0) - posicionY(techo);
        const y = datosNal.value.ascendente ? posicionY(limites.yMax) : posicionY(techo);

        areaUmbral.setAttribute('class', 'umbral');
        areaUmbral.setAttribute('x', `${dimsVis.marcoIz}px`);
        areaUmbral.setAttribute('fill', colorPositivo);
        areaUmbral.setAttribute('y', `${y}`);
        areaUmbral.setAttribute('width', '100%');
        areaUmbral.setAttribute('height', `${alto}`);
        contenedorEjeY.appendChild(areaUmbral);

        areaUmbral.onmouseenter = (evento) => {
          const x = evento.pageX;
          const y = evento.pageY;
          informacion.innerText = `La meta es: ${umbral}`;
          informacion.classList.add(...['visible', 'esUmbral']);
          Object.assign(informacion.style, {
            top: `${y}px`,
            left: `${x}px`,
          });
        };

        areaUmbral.onmousemove = (evento) => {
          const x = evento.pageX;
          const y = evento.pageY;
          Object.assign(informacion.style, {
            top: `${y}px`,
            left: `${x}px`,
          });
        };

        areaUmbral.onmouseleave = () => {
          informacion.classList.remove(...['visible', 'esUmbral']);
        };
      }

      for (let i = 0; i <= cantidadDivisiones; i++) {
        const grupo = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        const marca = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        const texto = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        const referencia = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        const textoEje = (limites.yMax / cantidadDivisiones) * i;
        const y = posicionY(textoEje);

        grupo.setAttribute('class', 'marcaEjeY');

        marca.setAttribute('class', 'marcaMarco');
        marca.setAttribute('x1', '0');
        marca.setAttribute('y1', '0');
        marca.setAttribute('x2', '5px');
        marca.setAttribute('y2', '0');

        texto.setAttribute('class', 'textoEje textoEjeY');
        texto.setAttribute('x', '-20');
        texto.setAttribute('y', '3');

        referencia.setAttribute('class', i === 0 ? 'lineaMarco lineaBase' : 'lineaY');
        referencia.setAttribute('x1', '0');
        referencia.setAttribute('x2', '100%');

        grupo.appendChild(marca);
        grupo.appendChild(texto);
        grupo.appendChild(referencia);
        contenedorEjeY.appendChild(grupo);

        actualizarMarcaY(grupo, y, i);
      }

      ejeYCreado = true;
    }

    function crearEjeX() {
      const lista = listaAños.value;
      const cortarAño = lista.length > 6;

      if (!datosNal.value.categorias) {
        const lineaNacional = new Linea(
          contenedorLineas,
          'Colombia',
          lista,
          obtenerVariableCSS('--fucsiaEsmalte'),
          visualizaciones.dataset.unidad
        );
        lineaNacional.agregar().actualizar(posicionX, posicionY);
        lineas.push(lineaNacional);
      }

      lista.forEach(({ año }) => {
        const grupo = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        const marca = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        const texto = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        const x = posicionX(+año) | 0;

        grupo.setAttribute('class', 'marcaEjeX');
        actualizarMarcaX(grupo, x);

        marca.setAttribute('class', 'marcaMarco');
        marca.setAttribute('x1', '0');
        marca.setAttribute('y1', '0');
        marca.setAttribute('x2', '0');
        marca.setAttribute('y2', '5');

        texto.setAttribute('class', 'año textoEje');
        texto.setAttribute('x', '0');
        texto.setAttribute('y', '15');
        texto.innerHTML = cortarAño ? `${año.slice(2, 4)}` : `${año}`;

        grupo.appendChild(marca);
        grupo.appendChild(texto);
        contenedorEjeX.appendChild(grupo);

        texto.onclick = () => {
          añoSeleccionado.set(año);
        };
      });
    }

    lugaresSeleccionados.subscribe(async (lugares) => {
      if (datosNal.value.categorias && listaCategorias.value) {
        if (lineas.length) return;

        const datos: { [llave: string]: DatosPorAñoOrdenado } = {};

        Object.keys(datosNal.value.categorias)
          .sort()
          .forEach((año) => {
            Object.values(datosNal.value.categorias[año]).forEach((valor, i) => {
              const llave = `c${i + 1}`;
              if (!datos[llave]) {
                datos[llave] = [];
              }

              datos[llave].push({ año, valor: valor ? valor : null });
            });
          });

        Object.values(datos).forEach((datosLinea, i) => {
          const categoria = listaCategorias.value[i];
          const color = `rgb(${coloresCategorias[`c${i + 1}`].join(',')})`;
          const linea = new Linea(contenedorLineas, categoria[0], datosLinea, color, estructura);
          linea.agregar();
          lineas.push(linea);
        });

        escalar();
        return;
      }

      if (!lugares.length) {
        lineas.forEach((linea) => {
          linea.eliminar();
        });
        escalar();
        return;
      }

      lineas.forEach((linea, i) => {
        const estaEnLista = lugares.find((lugar) => lugar.nombre === linea.nombre);
        if (!estaEnLista) {
          linea.eliminar();
          if (linea.nombre !== 'Colombia') lineas.splice(i, 1);
        }
      });

      // Lugares seleccionados es una lista de departamentos. Si cambiara a que se vean municipios, toca cambiar esto:
      const datos = (await datosIndicadorDep()) as DatosIndicador;

      lugares.forEach((lugar) => {
        const departamentoPorAño: DatosPorAñoOrdenado = [];

        for (const año in datos) {
          const datosLugar = datos[año].find(([codigo]) => codigo === lugar.codigoDep);
          departamentoPorAño.push({ año, valor: datosLugar ? datosLugar[1] : null });
        }

        const existeLinea = lineas.find((linea) => linea.nombre === lugar.nombre);

        if (existeLinea) {
          existeLinea.agregar();
        } else {
          const linea = new Linea(contenedorLineas, lugar.nombre, departamentoPorAño, lugar.color, estructura);
          linea.agregar().actualizar(posicionX, posicionY);
          lineas.push(linea);
        }
      });

      escalar();
    });

    añoSeleccionado.subscribe((añoActual) => {
      if (!añoActual) return;
      marcaAñoActual.setAttribute('x', `${posicionX(+añoActual) - 5}`);
    });
  }
</script>

<style lang="scss" is:global>
  @import '@/scss/constantes';

  #lineaDeTiempo {
    position: relative;
    margin: 5em 0em;

    h3 {
      margin: 0.3em 0;
    }

    #nombreLugar {
      color: rgb(0, 30, 74);
      text-transform: uppercase;
      font-size: 25px;
      font-weight: 700;
      letter-spacing: -0.4px;
    }

    #marcaAñoActual {
      fill: #f3e356;
    }

    #detalle {
      color: rgb(0, 30, 74);
      font-size: 0.9em;
      width: fit-content;
      position: fixed;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.25s ease-in-out;
      padding: 2px;
      background-color: white;
      font-weight: bold;
    }

    svg {
      display: block;

      .lineaMarco {
        stroke: rgb(0, 30, 74);
        stroke-width: 3;
      }

      .lineaY {
        stroke: rgb(195, 194, 194);
        stroke-width: 0.5;
      }

      .marcaMarco {
        stroke: rgb(0, 30, 74);
        stroke-width: 2;
      }

      .lineaDivision {
        stroke: rgb(0, 30, 74);
        stroke-width: 1;
        opacity: 0.6;
      }

      .año {
        transform: translateX(-5px);
        cursor: pointer;

        &:hover {
          opacity: 0.6;
        }

        &.activo {
          opacity: 0.6;
          cursor: default;
        }
      }

      .añoActual {
        stroke: rgb(0, 30, 74);
        stroke-width: 4;
        opacity: 0.6;
      }

      .umbral {
        opacity: 0.6;
      }

      .nombreEje {
        font-size: 0.6em;
        fill: rgb(0, 30, 74);
        font-weight: bold;
      }

      #nombreEjeX {
        transform: translate(10px, -5px);
      }

      .textoEje {
        font-size: 10px;
        fill: rgb(0, 30, 74);
        font-weight: bold;
      }

      #lineasTiempo {
        stroke: var(--fucsiaEsmalte);
        stroke-width: 2px;
        fill: none;
      }

      .linea,
      .punto,
      .umbral {
        transition: all 0.35s ease-in-out;
      }

      .punto {
        stroke: rgb(0, 30, 74);
        stroke-width: 5px;
        z-index: 9;
        cursor: pointer;
      }
    }

    #descripcionY {
      color: rgb(0, 30, 74);
      font-size: 13px;
      font-weight: bold;
      margin-bottom: 20px;
    }

    #descripcionMeta {
      border: 2px solid #4ca658;
      background-color: white;
      padding: 1em 1.5em;
      color: #0042bf;
      margin-top: 2em;
      margin-left: 30px;
    }

    #cabezote {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;

      ul {
        list-style: none;

        .colombia::before {
          content: '\25C9';
          font-weight: bold;
          display: inline-block;
          width: 1em;
          font-size: 1.2em;
          color: var(--fucsiaEsmalte);
        }

        .meta::before {
          content: '';
          display: inline-block;
          vertical-align: middle;
          margin: 0 8px 0 1px;
          width: 10px;
          height: 8px;
          background-color: #4ca658;
        }
      }

      #colorColombia {
        display: block;
        height: 20px;
        width: 20px;
        background-color: var(--uvaNinezYa);
      }
    }

    .anotacionUmbral {
      font-size: 0.7em;
      border: 1px solid #4ca658;
      padding: 0.8em;
      flex-basis: 60%;
      margin: 0;

      .resaltado {
        background-color: rgba(76, 166, 88, 0.6);
      }
    }
  }

  /// ✂️ Cortes pantalla
  @media screen and (min-width: $corte1) {
    #lineaDeTiempo {
      margin: 3em 0.5em;
    }
  }

  @media screen and (min-width: $corte3) {
    #lineaDeTiempo {
      margin: 2em 1em;
    }
  }
</style>
